//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SampleDataSource
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SampleDataSource { }
#else

	public class SampleDataSource : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public SampleDataSource()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/WordSolver;component/SampleData/SampleDataSource/SampleDataSource.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private Solutions _Solutions = new Solutions();

		public Solutions Solutions
		{
			get
			{
				return this._Solutions;
			}
		}

		private ActiveConstraints _ActiveConstraints = new ActiveConstraints();

		public ActiveConstraints ActiveConstraints
		{
			get
			{
				return this._ActiveConstraints;
			}

			set
			{
				if (this._ActiveConstraints != value)
				{
					this._ActiveConstraints = value;
					this.OnPropertyChanged("ActiveConstraints");
				}
			}
		}
	}

	public class Solutions : System.Collections.ObjectModel.ObservableCollection<SolutionsItem>
	{ 
	}

	public class SolutionsItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Text = string.Empty;

		public string Text
		{
			get
			{
				return this._Text;
			}

			set
			{
				if (this._Text != value)
				{
					this._Text = value;
					this.OnPropertyChanged("Text");
				}
			}
		}

		private double _Score = 0;

		public double Score
		{
			get
			{
				return this._Score;
			}

			set
			{
				if (this._Score != value)
				{
					this._Score = value;
					this.OnPropertyChanged("Score");
				}
			}
		}

		private TileInfos _TileInfos = new TileInfos();

		public TileInfos TileInfos
		{
			get
			{
				return this._TileInfos;
			}
		}
	}

	public class ActiveConstraints : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Template = string.Empty;

		public string Template
		{
			get
			{
				return this._Template;
			}

			set
			{
				if (this._Template != value)
				{
					this._Template = value;
					this.OnPropertyChanged("Template");
				}
			}
		}

		private string _Tiles = string.Empty;

		public string Tiles
		{
			get
			{
				return this._Tiles;
			}

			set
			{
				if (this._Tiles != value)
				{
					this._Tiles = value;
					this.OnPropertyChanged("Tiles");
				}
			}
		}
	}

	public class TileInfosItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Letter = string.Empty;

		public string Letter
		{
			get
			{
				return this._Letter;
			}

			set
			{
				if (this._Letter != value)
				{
					this._Letter = value;
					this.OnPropertyChanged("Letter");
				}
			}
		}

		private double _Score = 0;

		public double Score
		{
			get
			{
				return this._Score;
			}

			set
			{
				if (this._Score != value)
				{
					this._Score = value;
					this.OnPropertyChanged("Score");
				}
			}
		}
	}

	public class TileInfos : System.Collections.ObjectModel.ObservableCollection<TileInfosItem>
	{ 
	}
#endif
}
